; Demo kip file that calculates the fibonacci sequence recursively

>start
FIL 0 $0 $FFFF    ; Clear working RAM
PUA $10           ; Push starting output address
PUB 10            ; N
CAL fib           ; Call the fibonacci function

>output
RDB $19           |
RDB $18           |
RDB $17           |
RDB $16           |
RDB $15           } Displays RAM [$10,$19]
RDB $14           |
RDB $13           |
RDB $12           |
RDB $11           |
RDB $10           |
HLT               ; Ends the program

>fib              ; Fibonacci function. Stack frame: N (B), output (A), return (A)
POA $0            ; Pop return address
POB $4            ; Pop N
POA $5            ; Pop output address
JGT fib_B *$4 1   ; Skip to fib_B if N > 1
>fib_A
STB *$4 *$5       ; Write N to the output
JMP *$0           ; Return
>fib_B
PUA *$5           ; Push output address back onto the stack
DCB $4            ; Decrement N
PUB *$4           ; Push N - 1 onto the stack
PUA *$0           ; Push return address back onto the stack
INA $5            ; Increment output address
PUA *$5           ; Push next output address onto the stack
PUB *$4           ; Push N - 1 onto the stack
CAL fib           ; First recursive call
>fib_C
POA $0            ; Pop return address
POB $4            ; Pop N - 1
POA $5            ; Pop output address
PUA *$5           ; Push output address back onto the stack
PUA *$0           ; Push return address back onto the stack
DCB $4            ; Decrement N - 1
ADA *$5 2 $5      ; Add 2 to the output address
PUA *$5           ; Push next output address onto the stack
PUB *$4           ; Push N - 2 onto the stack
CAL fib           ; Second recursive call
>fib_D
POA $0            ; Pop return address
POA $4            ; Pop output address
ADA *$4 1 $8      ; Calculate output of first recursive call
ADA *$4 2 $C      ; Calculate output of first recursive call
ADB **$8 **$C *$4 ; Sum the outputs of both recursive calls and store the result at this function's output
JMP *$0           ; Return
